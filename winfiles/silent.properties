########################################
####
#### General Properties
####

### Root directory of the installation
root.dir=c:/Program Files/Micro Focus/Operations Orchestration
# On Windows, the path must be with / or with \\
# Example (Windows): root.dir=c:/Program Files/Micro Focus/Operations Orchestration
# Example (Linux): root.dir=/usr/local/micro focus/oo

### What to install

# install.java=
# Valid values: true, false
# Default: true
# This is required. You should only set this to false if Java Runtime has already been installed in the target directory.

# install.ras=true
# Valid values: true, false
# Default: false

install.central=true
# Valid values: true, false
# Default: true

install.docs=true
# Valid values: true, false
# Default: true

install.studio=true

### Central server ports
# http.port=8080
# Default: 8080
https.port=8443
# Default: 8443


### HTTP port access 
http.port.access=disable
# Options: enable (HTTP access is enabled)
# Options: disable (HTTP access is disabled)
# Default: http.port.access=enable
# Micro Focus recommends to disable the HTTP port and to use a TLS certificate for security reasons.


### Whether to start Central after the installation
should.start.central=true
# Valid values: true, false
# If you are configuring Micro Focus OO to be compliant with FIPS 140-2, this must be set to false.
# If you are installing a new Central in cluster mode and the installer version is older 
# than the current Central, this must be set to false.
# If you are installing a RAS together with Central, Central will be
# started, regardless of how this property is set.

### Select a supported language for Micro Focus Operations Orchestration, in addition to English.
language=en
# Valid values: en, fr, de, ja, es, ch
# Default: en
# This configures the language for Central in central-wrapper.conf file.
# For Central, this also changes the database schema language for SQL Server.


########################################
####
#### IDM configuration
####

### Whether to install or connect to an IDM service
# idm.mode=
# Valid values: native, connect, create. 
# Default: native
# native: use OO built-in authentication
# connect: connects to an existing IDM service
# create: installs the IDM service.

###
### Properties relevant only for idm.mode=create
### This option installs the IDM service along with Central.
###

# idm.host.name=
# Optional hostname of the IDM service
# Default value: FQDN of the machine that runs the installer

# idm.configuration.internal.password=
# The password for the IDM super-user account, the super user in IDM is named 'administrator' and is used by oo to communicate with the IDM service. Make sure the password is at least eight characters long and includes:
# * at least one lower case letter [a-z]
# * at least one upper case letter [A-Z]
# * at least one number [0-9]
# * at least one special character ~`!@#$%^&*()-_+={}[]|\;:<>,./?"

# idm.configuration.signing.key=
# The IDM configuration signing key. The signing key should be at least 32 characters. It must contain lower case, upper case and numeric characters.

# idmExportConfigurationToFile=
# Boolean value specifying whether to export IDM configurations to a file.
# Possible values: true, false.
# Default value: false

# idmExportFilePath=
# Absolute path to the export file location including the file name.
# On Windows, the path must be with / or with \\
# Example (Windows): idmExportFilePath=c:/Program Files/Micro Focus/idm-saved-configurations.txt
# Example (Linux): idmExportFilePath=/usr/local/micro focus/idm-saved-configurations.txt

# idmOverwriteExportFile= 
# Boolean value specifying whether to override an existing file.
# Possible values: true, false. 
# Default value: false

# idm.configuration.administrator.password=
# administrator user password, this is the password for the user with ADMINISTRATOR role for Central.

###
### Properties relevant only for idm.mode=connect
### This option connects Central to an existing IDM service.
###

# idm.configuration.url=
# IDM service url, format <http or https>://<HOSTNAME>:<PORT>/idm-service

# idm.configuration.username=
# The IDM transport username which OO will use in order to get the authentication token from IDM service.
# Default value: idmTransportUser

# idm.configuration.password=
# The IDM transport username's password.

# idm.configuration.signing.key=
# The IDM configuration signing key. The signing key should be at least 32 characters. It must contain lower case, upper case and numeric characters.

# idm.configuration.oo.central.tenant=
# The name of the tenant/organization that must exist in IDM.
# Default value: OO

# idm.configuration.internal.username=
# This is the IDM super-user account which will be created in IDM.
# Central will use this account in order to communicate with IDM service.

# idm.configuration.internal.password=
# The password for the IDM super-user account.

# The default users passwords. They will not overwrite any existing passwords.

# idm.configuration.administrator.password=
# administrator user password, this is the password for the user with ADMINISTRATOR role for Central.

# idm.configuration.oo.promoter.password=
# oopromoter user password, this is the password for the user with PROMOTER role, can access the Content Management workspace and the Run Management workspace.

# idm.configuration.oo.system.admin.password=
# oosystemadmin user password, this is the password for the user with SYSTEM_ADMIN role, can access the System Configuration workspace and the Run Management workspace.

# idm.configuration.oo.end.user.password=
# ooenduser user password, this is the password for the user with END_USER role, can only access the Run Management workspace.

# idm.configuration.oo.everybody.password=
# ooeverybody user password, this is the password for the user with EVERYBODY role, can only access the Run Management workspace.

########################################
####
#### Properties Relevant to the First Installed Central in a Cluster, or to a Standalone Central
####


####### Central server database properties

### Define the database type
db.type=postgresql
# Valid values: oracle, postgresql, mssql, and other.
# For db.type=oracle, db.driver.location MUST be set to the path of a Oracle JDBC driver (a JAR
# file). It is also available for db.type=other.
# For db.type=other, use to enable advanced features in supported databases. If you select
# other, you can only use a database type that is supported for use with Micro Focus OO.Â See the
# System Requirements for more information.

### Define the database driver
# db.driver=
# Resolved automatically from db.type, but can be overridden. 
# Linkage: If db.type is other, this property is required.


### Define the location of the database JDBC driver 
# db.driver.location=
# Linkage: Required when db.type=oracle. Required even when adding a node to a cluster.
# Example: db.driver.location=c:/tmp/mydriver.jar
# Note: This path is an example only. There is no need to create a tmp directory.

### Define the database JDBC URL
db.url=jdbc:postgresql://10.0.0.9:5432/oodemo01
# This is optional. Set this value if you want advanced features supported by the driver. 
# Linkage: If you set this property, the db.host, db.port, db.name and db.service.name properties are ignored.
# Oracle example with SID: db.url=jdbc:oracle:thin:@<host>:<port>:<sid>
# Oracle example with service name: db.url=jdbc:oracle:thin:@//<host>:<port>/<service.name>
# PostgreSQL example: db.url=jdbc:postgresql://<host>:<port>/<db.name>
# MS Sql example: db.url=jdbc:jtds:sqlserver://<host>:<port>/<db.name>


### Define the database host name
# db.host=
# Linkage: This property is ignored when db.url is used.


### Define the database port
# db.port=
# Linkage: This property is ignored when db.url is used.


### Define the database name or SID (depending on the type of database)
db.name=oodemo01
# Linkage: This property is ignored when db.url is used.
# Example: db.name=ORCL
# You cannot use special characters for the database name or SID, except the underscore (_).
# You can enter up to 30 characters for the database name or SID.


### Define the name of the database user
db.username=oodbuser
# This user name is required when you use the option to create a database. 
# The username is required also when connecting to an existing schema, the difference is 
# that it's not being created during the installation.
# The user name is created by the installer and eventually used by Micro Focus OO.
# Example: db.username=joe
# In Oracle, do not use SYS, SYSTEM, or other administrative account credentials. 
# In Microsoft SQL Server, do not use sa or other administrative account credentials.
# In PostgreSQL, do not use postgres credentials.
# PostgreSQL database names are case-sensitive.


### Define the password of the database user
db.password=n2!U6ABvy*VYJ
# This password is required when you use the option to create a database. 
# The password is required also when connecting to an existing schema, the difference is 
# that it's not being created during the installation.
# The password is created by the installer and eventually used by Micro Focus OO.
# Example: db.password=pass
# In Oracle, do not use SYS, SYSTEM, or other administrative account credentials. 
# In Microsoft SQL Server, do not use sa or other administrative account credentials.
# In PostgreSQL, do not use postgres credentials.


### Specify whether to create the database schema during installation
# To create the database schema you must provide the admin user credentials. This is a database user capable of
# creating a schema or database. Usually, this is a DBA user or a system user
# db.create-schema=true
# Valid values: true, false
# Default: false


### Define the admin user of the database
db.admin.username=postgres
# Used to create a schema/database/user
# Example: db.admin.username=postgres

### Define the database admin user password
db.admin.password=n2!U6ABvy*VYJ
# Used to create a schema/database/user
# Example: db.admin.password=manager


### Define the default tablespace name for the created user (Oracle only)
# db.tablespace= 
# Example: db.tablespace=USERS
# Linkage: Only used when creating a schema (user) in an Oracle database


### Define the default temporary tablespace name (Oracle only)
# db.temp.tablespace=
# Example: db.temp.tablespace=TEMP
# Linkage: Only used when creating a schema (user) in an Oracle database


### Define the database connection type (Oracle only)
# Valid values: sid, service
# Default value: sid
# db.oracle.connection.type=
# Example: db.oracle.connection.type=sid
# Linkage: Only used when setting up an Oracle database 


### Define the database service name (Oracle only)
# db.service.name=
# Example: db.service.name=orcl_name
# Linkage: Only used when db.oracle.connection.type=service


### Define the database SID (Oracle only)
# db.name=
# Example: db.name=orcl_sid
# Linkage: Only used when db.oracle.connection.type=sid


####### IDM server database properties

# The below configuration parameters are required only when idm.mode=create, and represent the database to which IDM service will be connected to.
# You can create a new database schema or you can connect to an already existing one. The schema name cannot be the same as the Central's schema name.
# Important note: IDM connects to the same database host as Central. This means that the database type, hostname and port will be inherited from Central's database configuration.

 

### Define the database username
# idm.db.username=
# This is the username that IDM will use to connect to it's existing schema.
# Example: idm.db.username=idmServer
# In Oracle, do not use SYS, SYSTEM, or other administrative account credentials. 
# In Microsoft SQL Server, do not use sa or other administrative account credentials.
# In PostgreSQL, do not use postgres credentials.
# PostgreSQL database names are case-sensitive.

### Define the database name or SID (depending on the type of database)
# idm.db.name=
# Example: idm.db.name=ORCL
# You cannot use special characters for the database name or SID, except the underscore (_).
# You can enter up to 30 characters for the database name or SID.

### Define the password of the database user
# idm.db.password=
# Example: idm.db.password=pass
# In Oracle, do not use SYS, SYSTEM, or other administrative account credentials. 
# In Microsoft SQL Server, do not use sa or other administrative account credentials.
# In PostgreSQL, do not use postgres credentials.

### Define the database service name (Oracle only)
# idm.db.service.name=
# Example: idm.db.service.name=orcl_service_name
# Linkage: Only used when the database is configured to connect to an Oracle database configured with a service name.
# If Central is configured to connect to an Oracle 
# Default value: sid
# Required only when the Oracle database configuration is with  service name instead of sid, if the parameter is not supplied the oracle configuration will be with sid.

### Specify whether to create the IDM database schema during installation
# To create the database schema you must provide the admin user credentials. This is a database user capable of
# creating a schema or database. Usually, this is a DBA user or a system user
# idm.db.create.schema=
# Valid values: true, false
# Default: false


### Define the admin user of the IDM database
# idm.db.admin.username=
# Used to create a schema/database/user
# Example: idm.db.admin.username=postgres

### Define the IDM database admin user password
# idm.db.admin.password=
# Used to create a schema/database/user
# Example: idm.db.admin.password=manager


### Define the default tablespace name for the created user (Oracle only)
# idm.db.tablespace=
# Example: idm.db.tablespace=USERS
# Linkage: Only used when creating a schema (user) in an Oracle database


### Define the default temporary tablespace name (Oracle only)
# idm.db.temp.tablespace=
# Example: idm.db.temp.tablespace=TEMP
# Linkage: Only used when creating a schema (user) in an Oracle database


########################################
####
#### Properties Relevant to a Standalone Central, RAS
####


### Define whether the SSl certificate is user-provided or self-signed
ssl.certificate.type=self-signed
# Valid values: self-signed, user-provided
# Linkage: If you chose to set ssl.certificate.type to be user-provided, you must also set a 
# value for ssl.user-provided-root-certificate.location
# Example: ssl.certificate.type=self-signed


### Specify the location of the user-provided keystore with the server certificate 
# ssl.user-keystore.location=
# This must be in PKCS12 format
# On  Windows, the path can use either / or \\
# Example: ssl.user-keystore.location=c:/tmp/certificate.p12/pfx


### Define the password for the user-provided keystore with service certificate
# ssl.user-keystore.password=

### Specify the location of the root certificate to be imported. 
# ssl.user-provided-root-certificate.location=
# Needed only if Central was installed with different certificates than self-signed.
# The root certificate must be in .cer or .crt format
# Linkage: If you chose to set ssl.certificate.type to be user-provided for Central, and if you 
# chose to install both Central and RAS, you must set a 
# value for ssl.user-provided-root-certificate.location
# Example: ssl.user-provided-root-certificate.location=c:/tmp/my.cer 
# Example: ssl.user-provided-root-certificate.location=c:\\tmp\\my.cer


########################################
####
#### Properties Relevant to a Central Node in a Cluster, But Not to the First Installed Central
####


#### Determine if this is a cluster installation
central.cluster=false
# Valid values: true, false
# Default: false


#### Specify the absolute path of the database.properties file
# central.cluster.database.properties=
# Absolute path of the database.properties file on the local machine, copied from an existing node 
# in OO 10.x, from <10.x installation>/central/conf.
# Example: central.cluster.database.properties=C:/<installation>/central/conf/database.properties


#### Specify the absolute path of the encryption.properties file
# central.cluster.encryption.properties=
# Absolute path of the encryption.properties file on the local machine, copied from an existing node 
# in OO 10.x, from <10.x installation>/central/var/security
# Example:central.cluster.encryption.properties=C:/<installation>/central/var/security/encryption.properties


#### Specify the absolute path of the encryption_repository 
# central.cluster.encryption_repository=
# Absolute path of the encryption_repository file on the local machine, copied from an existing node 
# in OO 10.x, from <10.x installation>/central/var/security
# Example: central.cluster.encryption_repository=C:/<installation>/central/var/security/encryption_repository



# db.driver.location=
# When using an Oracle database (in OO 10), it
# would normally be required to set this property. However, when installing a
# cluster node, this property is ignored due to an issue in the 10.00 installer.
# Therefore, you must manually copy the file to <installation>/central/lib and
# <installation>/central/tomcat/lib after the installation, then start the node.
# db.driver.location=C:/Users/admin/Desktop/mysql-connector-java-5.1.21.jar


### Whether to start Central after the installation
should.start.central=true
# Valid values: true, false
# If you are installing a new Central in cluster mode and the installer version is older 
# than the current Central, this must be set to false.



########################################
####
#### Installing a  standard RAS
####
#### Root directory of the installation:
# root.dir=C:/Program Files/Micro Focus/Operations Orchestration

#### What to install:
# install.java=true
# install.central=false
# install.ras=true


#### Define the Central connection properties - used to connect the RAS to the central
# central.url=http://10.0.0.10:8293/oo
# In the formats: http://<server-FQDN> or <IP address>:<HTTP_PORT>/oo
# Example: central.url=http://16.59.62.205:8293/oo
# If you are using a cluster, this should be the load balancer's URL:
# central.url=https://74.125.225.240:8443/oo


#### Define whether or not access to Central requires an HTTP proxy
# central.proxy=
# Valid values: no, manual
# Default: no

### Define the HTTP proxy host name for connecting to Central.
# central.proxy-hostname= 
# Example: proxy-hostname=myhost


### Define the HTTP proxy port for connecting to Central
# central.proxy-port= 
# central.proxy-port=880


### Define the HTTP proxy user name for connecting to Central, if proxy requires authentication.
# central.proxy-username= 


### Define the HTTP proxy password for connecting to Central, if needed.
# central.proxy-password= 


### Specify whether the Central is password protected
# central.secured=false
# valid values for central.secured: true, false 
# Default: true


### Define the Central user name that has MANAGE_TOPOLOGY permission.
# central.username=ptadmin
# Example: central.username=oouser 


### Define the Central user's password
# central.password=P@ssw0rd
# Example: central.password=oopass


### Define whether the RAS requires a SSL user-provided certificate to register
# ssl.certificate.type=self-signed
# Valid values: self-signed, user-provided
# Linkage: If your Central was installed with a user provided certificate 
# set this value to user-provided and also provide a
# value for ssl.user-provided-root-certificate.location
# Example: ssl.certificate.type=self-signed


### Specify the location of the root certificate to be imported. 
# ssl.user-provided-root-certificate.location=
# Needed only if Central was installed with different certificates than self-signed.
# The root certificate must be in .cer or .crt format
# Linkage: If you chose to set ssl.certificate.type to be user-provided for Central, and if you 
# chose to install both Central and RAS, you must set a 
# value for ssl.user-provided-root-certificate.location
# Example: ssl.user-provided-root-certificate.location=c:/tmp/my.cer 
# Example: ssl.user-provided-root-certificate.location=c:\\tmp\\my.cer


### Specify whether the X.509 client certificate should be provided by the RAS to Central
# ssl.client.certificate=
# Valid values: true, false
# Default: false
# This must be provided when Central requires an X.509 certificate from the client as a part of the SSL handshake. 


### Define the full path to the X.509 client certificate location of a user capable of registering a RAS
# ssl.user.client.certificate.location=
# On Windows, the path must be with / or with \\
 
 
### Define the X.509 client certificate password 
# ssl.user.client.certificate.password=



### Define the full path to the X.509 client certificate location 
# ssl.user-provided-client-certificate.location=
# On Windows, the path must be with / or with \\



### Define the X.509 client certificate password 
# ssl.client.certificate.password=


### Define the UUID of the RAS
# ssl.client.certificate.ras.uuid=
# If Central requires an X.509 client certificate, you need to generate it.
# The X.509 client certificate needs to have the principal name of the RAS, which is 
# the RAS UUID (see "Processing a Certificate Principal" in the Micro Focus OO System
# Security and Hardening Guide).
# This must be in the UUID format.
# You must generate the UUID and provide it here. 
# Example of UUID format: c7fd89e1-d703-44a1-b067-732b8ebbfe23


### Define the connectivity direction of the RAS
### This determines whether the RAS initiates the connection to Central (standard RAS) 
### or whether the RAS waits for Central to initiate the connection (reverse RAS) 
# register.ras=true
# Valid values: true, false
# true = standard RAS, false = reverse RAS

########################################
####
#### Installing a  reverse RAS
####
#### Root directory of the installation:
# root.dir=C:/Program Files/Micro Focus/Operations Orchestration

#### What to install:
# install.java=true
# install.central=false
# install.ras=true

### Define the connectivity direction of the RAS
### This determines whether the RAS initiates the connection to Central (standard RAS) 
### or whether the RAS waits for Central to initiate the connection (reverse RAS) 
# register.ras=false
# Valid values: true, false
# true = standard RAS, false = reverse RAS

# shared.secret=
# For a reverse RAS, enter the shared secret that will be used by Central, to communicate with this RAS   

# ras.server.address=
# Enter the IP address of the reverse RAS
# Example: ras.server.address=16.60.234.64

# ras.connectivity.protocol=
# Enter the protocol of the reverse RAS
# Valid values: HTTPS, HTTP
# Example: ras.connectivity.protocol=HTTPS  

# ras.connectivity.central.initiates.https.port=
# Enter the https port number of the reverse RAS (if protocol == HTTPS)
# Example: ras.connectivity.central.initiates.https.port=8443 

# ras.connectivity.central.initiates.http.port=
# Enter the http port number of the reverse RAS(if protocol == HTTP)
# Example: ras.connectivity.central.initiates.http.port=8080

### Define whether the SSl certificate is user-provided or self-signed
# ssl.certificate.type=
# Valid values: self-signed, user-provided
# Linkage: If you chose to set ssl.certificate.type to be user-provided, you must also set a 
# value for ssl.user-provided-root-certificate.location
# Example: ssl.certificate.type=self-signed


### Specify the location of the user-provided keystore with the server certificate 
# ssl.user-keystore.location=
# This must be in PKCS12 format
# On  Windows, the path can use either / or \\
# Example: ssl.user-keystore.location=c:/tmp/certificate.p12/pfx


### Define the password for the user-provided keystore with service certificate
# ssl.user-keystore.password=



########################################
####
#### Studio properties
####
#### Root directory of the installation:
root.dir=C:/Program Files/Micro Focus/Operations Orchestration

#### What to install:
# install.java=true
# install.central=false
# install.ras=false
# install.studio=true



### Specify the content packs to be imported to Studio
# studio.content.packs=
# Optional - use this if you want to auto-import CPs on first Studio startup. 
# Absolute paths to the needed CPs, separated by comma.
# Example: studio.content.packs=C:/tmp/oo10-base-cp-1.0.142.jar,C:/tmp/my-cp-1.0.0.jar


